/* Compositions */
/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter ($global-gutter): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-size-1));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}
.grid {
	/* ↓ Establish a grid context */
	display: grid;
	/* ↓ Set a gap between grid items */
	grid-gap: 1rem;
	/* ↓ Set the minimum column width */
	--minimum: 20ch;
}
@supports (width: min(var(--minimum), 100%)) {
	.grid {
		/* ↓ Enhance with the min() function
  into multiple columns */
		grid-template-columns: repeat(auto-fit, minmax(min(var(--minimum), 100%), 1fr));
	}
}
/* 
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
*/
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-size-1));
}
.sidebar:not([data-direction]) > :first-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}
.sidebar:not([data-direction]) > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}
/* 
A flipped version where the sidebar is on the right
*/
.sidebar[data-direction='rtl']
> :last-child {
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}
.sidebar[data-direction='rtl'] > :first-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: var(--sidebar-content-min-width, 50%);
}
/*
SWITCHER
More info: https://every-layout.dev/layouts/switcher/
A layout that allows you to lay **2** items next to each other
until there is not enough horizontal space to allow that.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between each item

--switcher-target-container-width (40rem): How large the container
needs to be to allow items to sit inline with each other

--switcher-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-size-1));
  align-items: var(--switcher-vertical-alignment, flex-start);
}
.switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);
}
/* Max 2 items,
so we target everything *after* those */
.switcher > :nth-last-child(n + 3),
.switcher > :nth-last-child(n + 3) ~ * {
  flex-basis: 100%;
}
/* Blocks */
.box {
	padding: var(--space, var(--space-size-1, 0.6em));
}
/* Utilities */
/*
FLOW UTILITY
Info: https://piccalil.li/quick-tip/flow-utility/
*/
.flow > * + * {
	margin-top: var(--flow-space, var(--space-size-2));
}
/* 
REGION UTILITY
Consistent block padding for page sections
*/
.region {
  padding-block: var(--region-space, var(--space-size-3));
}
/*
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/
*/
.visually-hidden,
.skip-link:not(:focus) {
	border: 0;
	clip: rect(0 0 0 0);
	height: 0;
	margin: 0;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	white-space: nowrap;
}
/*
WRAPPER UTILITY
A common wrapper/container
*/
.wrapper {
	margin-inline: auto;
	width: clamp(16rem, 95vw, 85rem);
	padding-inline: var(--space-size-1);
	position: relative;
}
/* breakout content elements to wrapper based on full bleed image solution by josh cumeau. https://www.joshwcomeau.com/css/full-bleed/ */
.content {
	display: grid;
	grid-template-columns:
		1fr
		min(65ch, 100%)
		1fr;
}
.content > * {
	grid-column: 2;
}
.content .breakout {
	width: 100%;
	grid-column: 1 / 4;
}
/* Tailwind utilities */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
.visible {
  visibility: visible;
}
.static {
  position: static;
}
.relative {
  position: relative;
}
.z-10 {
  z-index: 10;
}
.z-20 {
  z-index: 20;
}
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}
.mt-size-3 {
  margin-top: clamp(1.73rem, 1.09rem + 3.21vw, 3.38rem);
}
.mt-size-0 {
  margin-top: clamp(0.83rem, 0.90rem + -0.32vw, 0.67rem);
}
.mt-size-2 {
  margin-top: clamp(1.44rem, 1.12rem + 1.58vw, 2.25rem);
}
.mb-size-1 {
  margin-bottom: clamp(1.20rem, 1.08rem + 0.59vw, 1.50rem);
}
.mb-size-4 {
  margin-bottom: clamp(2.07rem, 0.91rem + 5.83vw, 5.06rem);
}
.inline {
  display: inline;
}
.grid {
  display: grid;
}
.contents {
  display: contents;
}
.hidden {
  display: none;
}
.h-full {
  height: 100%;
}
.h-max {
  height: -webkit-max-content;
  height: -moz-max-content;
  height: max-content;
}
.h-5 {
  height: 1.25rem;
}
.w-full {
  width: 100%;
}
.w-5 {
  width: 1.25rem;
}
.max-w-prose {
  max-width: 65ch;
}
.items-center {
  align-items: center;
}
.rounded-tr-2xl {
  border-top-right-radius: 1rem;
}
.bg-transparent {
  background-color: transparent;
}
.object-cover {
  -o-object-fit: cover;
     object-fit: cover;
}
.py-size-1 {
  padding-top: clamp(1.20rem, 1.08rem + 0.59vw, 1.50rem);
  padding-bottom: clamp(1.20rem, 1.08rem + 0.59vw, 1.50rem);
}
.pt-size-0 {
  padding-top: clamp(0.83rem, 0.90rem + -0.32vw, 0.67rem);
}
.pb-size-1 {
  padding-bottom: clamp(1.20rem, 1.08rem + 0.59vw, 1.50rem);
}
.pb-size-3 {
  padding-bottom: clamp(1.73rem, 1.09rem + 3.21vw, 3.38rem);
}
.pt-size-5 {
  padding-top: clamp(2.49rem, 0.50rem + 9.96vw, 7.59rem);
}
.font-display {
  font-family: Charter, ui-sans-serif, system-ui, sans-serif;
}
.text-size-2 {
  font-size: clamp(1.44rem, 1.12rem + 1.58vw, 2.25rem);
}
.text-lg {
  font-size: 1.125rem;
  line-height: 1.75rem;
}
.font-bold {
  font-weight: 700;
}
.uppercase {
  text-transform: uppercase;
}
.no-underline {
  -webkit-text-decoration-line: none;
          text-decoration-line: none;
}
.opacity-70 {
  opacity: 0.7;
}
.opacity-80 {
  opacity: 0.8;
}
.outline {
  outline-style: solid;
}
.invert {
  --tw-invert: invert(100%);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
